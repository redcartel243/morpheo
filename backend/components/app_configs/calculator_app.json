{
  "id": "calculator_app",
  "name": "Calculator Application",
  "description": "A configurable calculator application that can be adapted for different calculator types: simple, scientific, or specialized.",
  "type": "utility",
  "capabilities": ["numeric calculation", "mathematical functions", "user input", "responsive layout"],
  
  "layout": {
    "type": "grid",
    "columns": "1fr",
    "gap": "10px",
    "rows": "auto auto 1fr auto",
    "areas": [
      "header",
      "display",
      "keypad",
      "footer"
    ]
  },
  
  "children": [
    {
      "id": "app-header",
      "type": "card",
      "gridArea": "header",
      "props": {
        "title": "Calculator",
        "subtitle": "Perform mathematical calculations",
        "variant": "elevated",
        "elevation": 2
      },
      "styles": {
        "marginBottom": "10px"
      }
    },
    
    {
      "id": "calculator-display",
      "type": "card",
      "gridArea": "display",
      "props": {
        "variant": "outlined",
        "elevation": 1,
        "padding": "8px"
      },
      "children": [
        {
          "id": "expression-display",
          "type": "text",
          "props": {
            "variant": "body2",
            "color": "#666"
          }
        },
        {
          "id": "result-display",
          "type": "text",
          "props": {
            "variant": "h3",
            "align": "right",
            "bold": true
          },
          "styles": {
            "marginTop": "4px",
            "fontSize": "28px",
            "overflow": "hidden",
            "textOverflow": "ellipsis",
            "fontFamily": "monospace"
          }
        }
      ]
    },
    
    {
      "id": "keypad-container",
      "type": "card",
      "gridArea": "keypad",
      "props": {
        "variant": "outlined"
      },
      "children": [
        {
          "id": "standard-keypad",
          "type": "grid",
          "props": {
            "columns": "repeat(4, 1fr)",
            "gap": "8px"
          },
          "children": [
            {
              "id": "btn-clear",
              "type": "button",
              "props": {
                "text": "C",
                "variant": "outlined",
                "size": "large"
              },
              "styles": {
                "backgroundColor": "#f8d7da",
                "color": "#721c24"
              }
            },
            {
              "id": "btn-backspace",
              "type": "button",
              "props": {
                "text": "⌫",
                "variant": "outlined",
                "size": "large"
              },
              "styles": {
                "gridColumn": "span 2"
              }
            },
            {
              "id": "btn-divide",
              "type": "button",
              "props": {
                "text": "÷",
                "variant": "outlined",
                "size": "large"
              },
              "styles": {
                "backgroundColor": "#e2e3e5",
                "color": "#383d41"
              }
            },
            
            {
              "id": "btn-7",
              "type": "button",
              "props": {
                "text": "7",
                "variant": "outlined",
                "size": "large"
              }
            },
            {
              "id": "btn-8",
              "type": "button",
              "props": {
                "text": "8",
                "variant": "outlined",
                "size": "large"
              }
            },
            {
              "id": "btn-9",
              "type": "button",
              "props": {
                "text": "9",
                "variant": "outlined",
                "size": "large"
              }
            },
            {
              "id": "btn-multiply",
              "type": "button",
              "props": {
                "text": "×",
                "variant": "outlined",
                "size": "large"
              },
              "styles": {
                "backgroundColor": "#e2e3e5",
                "color": "#383d41"
              }
            },
            
            {
              "id": "btn-4",
              "type": "button",
              "props": {
                "text": "4",
                "variant": "outlined",
                "size": "large"
              }
            },
            {
              "id": "btn-5",
              "type": "button",
              "props": {
                "text": "5",
                "variant": "outlined",
                "size": "large"
              }
            },
            {
              "id": "btn-6",
              "type": "button",
              "props": {
                "text": "6",
                "variant": "outlined",
                "size": "large"
              }
            },
            {
              "id": "btn-subtract",
              "type": "button",
              "props": {
                "text": "-",
                "variant": "outlined",
                "size": "large"
              },
              "styles": {
                "backgroundColor": "#e2e3e5",
                "color": "#383d41"
              }
            },
            
            {
              "id": "btn-1",
              "type": "button",
              "props": {
                "text": "1",
                "variant": "outlined",
                "size": "large"
              }
            },
            {
              "id": "btn-2",
              "type": "button",
              "props": {
                "text": "2",
                "variant": "outlined",
                "size": "large"
              }
            },
            {
              "id": "btn-3",
              "type": "button",
              "props": {
                "text": "3",
                "variant": "outlined",
                "size": "large"
              }
            },
            {
              "id": "btn-add",
              "type": "button",
              "props": {
                "text": "+",
                "variant": "outlined",
                "size": "large"
              },
              "styles": {
                "backgroundColor": "#e2e3e5",
                "color": "#383d41"
              }
            },
            
            {
              "id": "btn-0",
              "type": "button",
              "props": {
                "text": "0",
                "variant": "outlined",
                "size": "large"
              },
              "styles": {
                "gridColumn": "span 2"
              }
            },
            {
              "id": "btn-decimal",
              "type": "button",
              "props": {
                "text": ".",
                "variant": "outlined",
                "size": "large"
              }
            },
            {
              "id": "btn-equals",
              "type": "button",
              "props": {
                "text": "=",
                "variant": "contained",
                "size": "large"
              },
              "styles": {
                "backgroundColor": "#007bff",
                "color": "white"
              }
            }
          ]
        },
        
        {
          "id": "scientific-keypad",
          "type": "grid",
          "props": {
            "columns": "repeat(5, 1fr)",
            "gap": "8px"
          },
          "styles": {
            "display": "none",
            "marginTop": "10px"
          },
          "children": [
            {
              "id": "btn-sin",
              "type": "button",
              "props": {
                "text": "sin",
                "variant": "outlined",
                "size": "medium"
              },
              "styles": {
                "backgroundColor": "#d1ecf1",
                "color": "#0c5460"
              }
            },
            {
              "id": "btn-cos",
              "type": "button",
              "props": {
                "text": "cos",
                "variant": "outlined",
                "size": "medium"
              },
              "styles": {
                "backgroundColor": "#d1ecf1",
                "color": "#0c5460"
              }
            },
            {
              "id": "btn-tan",
              "type": "button",
              "props": {
                "text": "tan",
                "variant": "outlined",
                "size": "medium"
              },
              "styles": {
                "backgroundColor": "#d1ecf1",
                "color": "#0c5460"
              }
            },
            {
              "id": "btn-log",
              "type": "button",
              "props": {
                "text": "log",
                "variant": "outlined",
                "size": "medium"
              },
              "styles": {
                "backgroundColor": "#d1ecf1",
                "color": "#0c5460"
              }
            },
            {
              "id": "btn-ln",
              "type": "button",
              "props": {
                "text": "ln",
                "variant": "outlined",
                "size": "medium"
              },
              "styles": {
                "backgroundColor": "#d1ecf1",
                "color": "#0c5460"
              }
            },
            {
              "id": "btn-square",
              "type": "button",
              "props": {
                "text": "x²",
                "variant": "outlined",
                "size": "medium"
              },
              "styles": {
                "backgroundColor": "#d1ecf1",
                "color": "#0c5460"
              }
            },
            {
              "id": "btn-cube",
              "type": "button",
              "props": {
                "text": "x³",
                "variant": "outlined",
                "size": "medium"
              },
              "styles": {
                "backgroundColor": "#d1ecf1",
                "color": "#0c5460"
              }
            },
            {
              "id": "btn-sqrt",
              "type": "button",
              "props": {
                "text": "√",
                "variant": "outlined",
                "size": "medium"
              },
              "styles": {
                "backgroundColor": "#d1ecf1",
                "color": "#0c5460"
              }
            },
            {
              "id": "btn-power",
              "type": "button",
              "props": {
                "text": "xʸ",
                "variant": "outlined",
                "size": "medium"
              },
              "styles": {
                "backgroundColor": "#d1ecf1",
                "color": "#0c5460"
              }
            },
            {
              "id": "btn-e",
              "type": "button",
              "props": {
                "text": "e",
                "variant": "outlined",
                "size": "medium"
              },
              "styles": {
                "backgroundColor": "#d1ecf1",
                "color": "#0c5460"
              }
            }
          ]
        }
      ]
    },
    
    {
      "id": "calculator-footer",
      "type": "card",
      "gridArea": "footer",
      "props": {
        "variant": "outlined"
      },
      "children": [
        {
          "id": "calculator-type-selector",
          "type": "grid",
          "props": {
            "columns": "repeat(2, 1fr)",
            "gap": "8px"
          },
          "children": [
            {
              "id": "btn-standard-mode",
              "type": "button",
              "props": {
                "text": "Standard",
                "variant": "contained",
                "size": "medium"
              },
              "styles": {
                "backgroundColor": "#007bff",
                "color": "white"
              }
            },
            {
              "id": "btn-scientific-mode",
              "type": "button",
              "props": {
                "text": "Scientific",
                "variant": "outlined",
                "size": "medium"
              }
            }
          ]
        }
      ]
    }
  ],
  
  "state": {
    "displayValue": "0",
    "previousValue": null,
    "operation": null,
    "resetDisplay": false,
    "isScientificMode": false,
    "expression": "",
    "memory": 0
  },
  
  "stateReducer": "function stateReducer(state, event) {\n  const { componentId, data } = event.payload;\n  \n  // Clone the state to avoid direct mutations\n  const newState = { ...state };\n  \n  // Handle number buttons (0-9)\n  if (componentId.startsWith('btn-') && /^btn-\\d$/.test(componentId)) {\n    const digit = componentId.slice(4);\n    \n    if (state.resetDisplay || state.displayValue === '0') {\n      newState.displayValue = digit;\n      newState.resetDisplay = false;\n    } else {\n      newState.displayValue = state.displayValue + digit;\n    }\n    \n    // Update the expression\n    if (state.resetDisplay) {\n      newState.expression = state.expression + digit;\n    } else if (state.expression === '' || state.expression === '0') {\n      newState.expression = digit;\n    } else {\n      newState.expression = state.expression + digit;\n    }\n    \n    return newState;\n  }\n  \n  // Handle decimal point\n  if (componentId === 'btn-decimal') {\n    if (!state.displayValue.includes('.')) {\n      newState.displayValue = state.displayValue + '.';\n      newState.expression = state.expression + '.';\n    }\n    return newState;\n  }\n  \n  // Handle clear button\n  if (componentId === 'btn-clear') {\n    return {\n      ...state,\n      displayValue: '0',\n      previousValue: null,\n      operation: null,\n      resetDisplay: false,\n      expression: ''\n    };\n  }\n  \n  // Handle backspace button\n  if (componentId === 'btn-backspace') {\n    if (state.displayValue.length > 1) {\n      newState.displayValue = state.displayValue.slice(0, -1);\n    } else {\n      newState.displayValue = '0';\n    }\n    \n    if (state.expression.length > 1) {\n      newState.expression = state.expression.slice(0, -1);\n    } else {\n      newState.expression = '';\n    }\n    \n    return newState;\n  }\n  \n  // Handle operation buttons (+, -, ×, ÷)\n  if (['btn-add', 'btn-subtract', 'btn-multiply', 'btn-divide'].includes(componentId)) {\n    const operationMap = {\n      'btn-add': '+',\n      'btn-subtract': '-',\n      'btn-multiply': '*',\n      'btn-divide': '/'\n    };\n    \n    const operationSymbol = operationMap[componentId];\n    const displaySymbol = componentId === 'btn-multiply' ? '×' : \n                           componentId === 'btn-divide' ? '÷' : \n                           operationSymbol;\n    \n    if (state.operation !== null && !state.resetDisplay) {\n      // Calculate the result of the previous operation\n      try {\n        const result = calculateResult(state.previousValue, state.displayValue, state.operation);\n        newState.displayValue = String(result);\n        newState.previousValue = result;\n        newState.expression = state.expression + ' ' + displaySymbol + ' ';\n      } catch (error) {\n        newState.displayValue = 'Error';\n        newState.expression = 'Error';\n        return newState;\n      }\n    } else {\n      newState.previousValue = parseFloat(state.displayValue);\n      newState.expression = state.expression + ' ' + displaySymbol + ' ';\n    }\n    \n    newState.operation = operationSymbol;\n    newState.resetDisplay = true;\n    \n    return newState;\n  }\n  \n  // Handle equals button\n  if (componentId === 'btn-equals') {\n    if (state.previousValue === null || state.operation === null) {\n      return state;\n    }\n    \n    try {\n      const result = calculateResult(state.previousValue, state.displayValue, state.operation);\n      newState.displayValue = String(result);\n      newState.previousValue = null;\n      newState.operation = null;\n      newState.resetDisplay = true;\n      \n      // Keep the complete expression and add the result\n      newState.expression = state.expression + ' = ' + result;\n    } catch (error) {\n      newState.displayValue = 'Error';\n      newState.expression = 'Error';\n    }\n    \n    return newState;\n  }\n  \n  // Handle scientific functions\n  if (state.isScientificMode) {\n    // Sin, Cos, Tan functions\n    if (['btn-sin', 'btn-cos', 'btn-tan'].includes(componentId)) {\n      const value = parseFloat(state.displayValue);\n      let result;\n      \n      if (componentId === 'btn-sin') {\n        result = Math.sin(value * Math.PI / 180); // Degrees to radians\n        newState.expression = 'sin(' + state.displayValue + ')';\n      } else if (componentId === 'btn-cos') {\n        result = Math.cos(value * Math.PI / 180);\n        newState.expression = 'cos(' + state.displayValue + ')';\n      } else if (componentId === 'btn-tan') {\n        result = Math.tan(value * Math.PI / 180);\n        newState.expression = 'tan(' + state.displayValue + ')';\n      }\n      \n      newState.displayValue = String(result);\n      newState.resetDisplay = true;\n      return newState;\n    }\n    \n    // Log and Ln functions\n    if (['btn-log', 'btn-ln'].includes(componentId)) {\n      const value = parseFloat(state.displayValue);\n      \n      if (value <= 0) {\n        newState.displayValue = 'Error';\n        newState.expression = 'Error: Invalid input for logarithm';\n        return newState;\n      }\n      \n      let result;\n      if (componentId === 'btn-log') {\n        result = Math.log10(value);\n        newState.expression = 'log(' + state.displayValue + ')';\n      } else {\n        result = Math.log(value);\n        newState.expression = 'ln(' + state.displayValue + ')';\n      }\n      \n      newState.displayValue = String(result);\n      newState.resetDisplay = true;\n      return newState;\n    }\n    \n    // Square, Cube, Sqrt\n    if (['btn-square', 'btn-cube', 'btn-sqrt'].includes(componentId)) {\n      const value = parseFloat(state.displayValue);\n      let result;\n      \n      if (componentId === 'btn-square') {\n        result = value * value;\n        newState.expression = '(' + state.displayValue + ')²';\n      } else if (componentId === 'btn-cube') {\n        result = value * value * value;\n        newState.expression = '(' + state.displayValue + ')³';\n      } else if (componentId === 'btn-sqrt') {\n        if (value < 0) {\n          newState.displayValue = 'Error';\n          newState.expression = 'Error: Cannot take square root of negative number';\n          return newState;\n        }\n        result = Math.sqrt(value);\n        newState.expression = '√(' + state.displayValue + ')';\n      }\n      \n      newState.displayValue = String(result);\n      newState.resetDisplay = true;\n      return newState;\n    }\n    \n    // Power function\n    if (componentId === 'btn-power') {\n      newState.previousValue = parseFloat(state.displayValue);\n      newState.operation = 'power';\n      newState.resetDisplay = true;\n      newState.expression = state.displayValue + '^';\n      return newState;\n    }\n    \n    // E constant\n    if (componentId === 'btn-e') {\n      newState.displayValue = String(Math.E);\n      newState.expression = 'e';\n      newState.resetDisplay = true;\n      return newState;\n    }\n  }\n  \n  // Handle calculator mode switches\n  if (componentId === 'btn-standard-mode') {\n    newState.isScientificMode = false;\n    return newState;\n  }\n  \n  if (componentId === 'btn-scientific-mode') {\n    newState.isScientificMode = true;\n    return newState;\n  }\n  \n  return state;\n}\n\n// Helper function to calculate results\nfunction calculateResult(a, b, operation) {\n  a = parseFloat(a);\n  b = parseFloat(b);\n  \n  switch (operation) {\n    case '+':\n      return a + b;\n    case '-':\n      return a - b;\n    case '*':\n      return a * b;\n    case '/':\n      if (b === 0) throw new Error('Division by zero');\n      return a / b;\n    case 'power':\n      return Math.pow(a, b);\n    default:\n      throw new Error('Unknown operation');\n  }\n}",
  
  "eventBindings": [
    {
      "selector": "btn-0, btn-1, btn-2, btn-3, btn-4, btn-5, btn-6, btn-7, btn-8, btn-9",
      "event": "click",
      "action": "stateReducer"
    },
    {
      "selector": "btn-decimal",
      "event": "click",
      "action": "stateReducer"
    },
    {
      "selector": "btn-add, btn-subtract, btn-multiply, btn-divide",
      "event": "click",
      "action": "stateReducer"
    },
    {
      "selector": "btn-equals",
      "event": "click",
      "action": "stateReducer"
    },
    {
      "selector": "btn-clear, btn-backspace",
      "event": "click",
      "action": "stateReducer"
    },
    {
      "selector": "btn-standard-mode, btn-scientific-mode",
      "event": "click",
      "action": "stateReducer"
    },
    {
      "selector": "btn-sin, btn-cos, btn-tan, btn-log, btn-ln, btn-square, btn-cube, btn-sqrt, btn-power, btn-e",
      "event": "click",
      "action": "stateReducer"
    }
  ],
  
  "dataBindings": [
    {
      "source": "state.displayValue",
      "target": "result-display.props.content"
    },
    {
      "source": "state.expression",
      "target": "expression-display.props.content"
    },
    {
      "source": "state.isScientificMode",
      "target": "scientific-keypad.styles.display",
      "transform": "value ? 'block' : 'none'"
    },
    {
      "source": "state.isScientificMode",
      "target": "btn-standard-mode.props.variant",
      "transform": "value ? 'outlined' : 'contained'"
    },
    {
      "source": "state.isScientificMode",
      "target": "btn-scientific-mode.props.variant",
      "transform": "value ? 'contained' : 'outlined'"
    },
    {
      "source": "state.isScientificMode",
      "target": "btn-standard-mode.styles.backgroundColor",
      "transform": "value ? '' : '#007bff'"
    },
    {
      "source": "state.isScientificMode",
      "target": "btn-standard-mode.styles.color",
      "transform": "value ? '' : 'white'"
    },
    {
      "source": "state.isScientificMode",
      "target": "btn-scientific-mode.styles.backgroundColor",
      "transform": "value ? '#007bff' : ''"
    },
    {
      "source": "state.isScientificMode",
      "target": "btn-scientific-mode.styles.color",
      "transform": "value ? 'white' : ''"
    },
    {
      "source": "state.isScientificMode",
      "target": "app-header.props.title",
      "transform": "value ? 'Scientific Calculator' : 'Standard Calculator'"
    }
  ]
} 