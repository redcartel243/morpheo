{
  "id": "todo-app",
  "name": "Todo Application",
  "description": "A simple task management application for tracking to-do items",
  "layout": {
    "type": "grid",
    "config": {
      "container": true,
      "spacing": 16,
      "justifyContent": "center"
    },
    "children": [
      {
        "type": "grid",
        "config": {
          "item": true,
          "xs": 12,
          "md": 8,
          "lg": 6
        },
        "children": [
          {
            "id": "app-header",
            "type": "card",
            "config": {
              "title": "Todo Application",
              "subtitle": "Manage your daily tasks",
              "variant": "elevated",
              "elevation": 2,
              "backgroundColor": "#fafafa"
            },
            "children": [
              {
                "id": "task-input-container",
                "type": "grid",
                "config": {
                  "container": true,
                  "spacing": 8
                },
                "children": [
                  {
                    "id": "task-input",
                    "type": "text-input",
                    "config": {
                      "placeholder": "Add a new task...",
                      "label": "New Task",
                      "fullWidth": true
                    }
                  },
                  {
                    "id": "add-task-button",
                    "type": "button",
                    "config": {
                      "text": "Add Task",
                      "variant": "primary",
                      "fullWidth": false
                    }
                  }
                ]
              }
            ]
          },
          {
            "id": "task-list-container",
            "type": "card",
            "config": {
              "variant": "outlined",
              "title": "My Tasks"
            },
            "children": [
              {
                "id": "tasks-summary",
                "type": "grid",
                "config": {
                  "container": true,
                  "spacing": 16,
                  "justifyContent": "space-between",
                  "alignItems": "center"
                },
                "children": [
                  {
                    "id": "task-counter",
                    "type": "text",
                    "config": {
                      "content": "0 tasks remaining"
                    }
                  },
                  {
                    "id": "clear-completed-button",
                    "type": "button",
                    "config": {
                      "text": "Clear Completed",
                      "variant": "outlined",
                      "size": "small"
                    }
                  }
                ]
              },
              {
                "id": "task-list",
                "type": "list",
                "config": {
                  "items": []
                }
              }
            ]
          },
          {
            "id": "task-stats",
            "type": "card",
            "config": {
              "title": "Task Statistics",
              "variant": "elevated",
              "elevation": 1
            },
            "children": [
              {
                "id": "task-chart",
                "type": "bar-chart",
                "config": {
                  "height": 200,
                  "data": [
                    { "category": "Completed", "count": 0 },
                    { "category": "In Progress", "count": 0 },
                    { "category": "Planned", "count": 0 }
                  ],
                  "xKey": "category",
                  "yKey": "count",
                  "barColor": "#4caf50",
                  "title": "Task Status"
                }
              }
            ]
          }
        ]
      }
    ]
  },
  "state": {
    "tasks": [],
    "newTaskText": "",
    "filter": "all"
  },
  "backend": {
    "services": [
      {
        "id": "storage",
        "type": "local-storage",
        "config": {
          "namespace": "todo-app",
          "defaultExpiry": 0
        }
      }
    ]
  },
  "stateReducer": "function stateReducer(state, action) {\n  // Clone the state to avoid direct mutations\n  const newState = JSON.parse(JSON.stringify(state));\n  \n  switch (action.type) {\n    case 'SET_NEW_TASK_TEXT':\n      newState.newTaskText = action.payload;\n      return newState;\n      \n    case 'ADD_TASK':\n      if (!newState.newTaskText.trim()) return newState;\n      \n      // Add new task\n      const newTask = {\n        id: Date.now().toString(),\n        text: newState.newTaskText.trim(),\n        completed: false,\n        createdAt: new Date().toISOString()\n      };\n      \n      newState.tasks.push(newTask);\n      newState.newTaskText = '';\n      \n      // Update local storage\n      const storage = getService('storage');\n      storage.setItem('tasks', newState.tasks);\n      \n      return newState;\n      \n    case 'TOGGLE_TASK':\n      const taskId = action.payload;\n      newState.tasks = newState.tasks.map(task => {\n        if (task.id === taskId) {\n          return { ...task, completed: !task.completed };\n        }\n        return task;\n      });\n      \n      // Update local storage\n      getService('storage').setItem('tasks', newState.tasks);\n      \n      return newState;\n      \n    case 'DELETE_TASK':\n      newState.tasks = newState.tasks.filter(task => task.id !== action.payload);\n      \n      // Update local storage\n      getService('storage').setItem('tasks', newState.tasks);\n      \n      return newState;\n      \n    case 'CLEAR_COMPLETED':\n      newState.tasks = newState.tasks.filter(task => !task.completed);\n      \n      // Update local storage\n      getService('storage').setItem('tasks', newState.tasks);\n      \n      return newState;\n      \n    case 'SET_FILTER':\n      newState.filter = action.payload;\n      return newState;\n      \n    case 'LOAD_TASKS':\n      // Initialize from local storage\n      const storedTasks = getService('storage').getItem('tasks', []);\n      newState.tasks = storedTasks;\n      return newState;\n      \n    default:\n      return state;\n  }\n}",
  "eventBindings": [
    {
      "componentId": "task-input",
      "event": "onChange",
      "action": {
        "type": "SET_NEW_TASK_TEXT",
        "payloadFromEvent": "value"
      }
    },
    {
      "componentId": "task-input",
      "event": "onKeyDown",
      "condition": "event.key === 'Enter'",
      "action": {
        "type": "ADD_TASK"
      }
    },
    {
      "componentId": "add-task-button",
      "event": "onClick",
      "action": {
        "type": "ADD_TASK"
      }
    },
    {
      "componentId": "clear-completed-button",
      "event": "onClick",
      "action": {
        "type": "CLEAR_COMPLETED"
      }
    },
    {
      "componentId": "app-header",
      "event": "onMount",
      "action": {
        "type": "LOAD_TASKS"
      }
    }
  ],
  "dataBindings": [
    {
      "componentId": "task-input",
      "prop": "value",
      "stateSelector": "state.newTaskText"
    },
    {
      "componentId": "task-counter",
      "prop": "content",
      "stateSelector": "state.tasks.filter(t => !t.completed).length + ' tasks remaining'"
    },
    {
      "componentId": "task-list",
      "prop": "items",
      "stateSelector": "state.tasks.map(task => ({\n  id: task.id,\n  content: {\n    type: 'grid',\n    config: {\n      container: true,\n      alignItems: 'center',\n      spacing: 8\n    },\n    children: [\n      {\n        id: 'checkbox-' + task.id,\n        type: 'checkbox',\n        config: {\n          checked: task.completed,\n          onChange: { type: 'TOGGLE_TASK', payload: task.id }\n        }\n      },\n      {\n        type: 'text',\n        config: {\n          content: task.text,\n          style: task.completed ? { textDecoration: 'line-through', color: '#888' } : {}\n        }\n      },\n      {\n        id: 'delete-' + task.id,\n        type: 'button',\n        config: {\n          text: 'Delete',\n          variant: 'text',\n          size: 'small',\n          color: 'error',\n          onClick: { type: 'DELETE_TASK', payload: task.id }\n        }\n      }\n    ]\n  }\n}))"
    },
    {
      "componentId": "task-chart",
      "prop": "data",
      "stateSelector": "[\n  { category: 'Completed', count: state.tasks.filter(t => t.completed).length },\n  { category: 'Remaining', count: state.tasks.filter(t => !t.completed).length }\n]"
    }
  ]
} 