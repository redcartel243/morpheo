{
  "id": "bar_chart",
  "name": "Bar Chart",
  "description": "A bar chart for displaying comparative data across categories",
  "type": "chart",
  "capabilities": ["data visualization", "comparative analysis", "trend display"],
  "propTypes": {
    "data": {
      "type": "array",
      "description": "Array of data objects to display",
      "required": true
    },
    "xKey": {
      "type": "string",
      "description": "Property name in data objects for X-axis labels",
      "required": true
    },
    "yKey": {
      "type": "string",
      "description": "Property name in data objects for Y-axis values",
      "required": true
    },
    "width": {
      "type": "number",
      "description": "Width of the chart in pixels",
      "default": 600
    },
    "height": {
      "type": "number",
      "description": "Height of the chart in pixels",
      "default": 400
    },
    "margin": {
      "type": "object",
      "description": "Margins around the chart",
      "default": {
        "top": 20,
        "right": 30,
        "bottom": 50,
        "left": 60
      }
    },
    "barColor": {
      "type": "string",
      "description": "Color of the bars",
      "default": "#2196f3"
    },
    "hoverColor": {
      "type": "string",
      "description": "Color of bars on hover",
      "default": "#1565c0"
    },
    "title": {
      "type": "string",
      "description": "Chart title",
      "required": false
    },
    "xAxisLabel": {
      "type": "string",
      "description": "Label for X-axis",
      "required": false
    },
    "yAxisLabel": {
      "type": "string",
      "description": "Label for Y-axis",
      "required": false
    },
    "showGrid": {
      "type": "boolean",
      "description": "Whether to show grid lines",
      "default": true
    },
    "showTooltip": {
      "type": "boolean",
      "description": "Whether to show tooltips on hover",
      "default": true
    },
    "horizontal": {
      "type": "boolean",
      "description": "Whether to display bars horizontally",
      "default": false
    },
    "stacked": {
      "type": "boolean",
      "description": "Whether to display bars in stacked mode (for multi-series data)",
      "default": false
    },
    "animate": {
      "type": "boolean",
      "description": "Whether to animate the chart when data changes",
      "default": true
    }
  },
  "defaultStyles": {
    "fontFamily": "Arial, sans-serif",
    "fontSize": "12px"
  },
  "titleStyles": {
    "fontSize": "18px",
    "fontWeight": "bold",
    "textAnchor": "middle"
  },
  "axisStyles": {
    "stroke": "#333",
    "strokeWidth": 1
  },
  "gridStyles": {
    "stroke": "#e0e0e0",
    "strokeDasharray": "3,3"
  },
  "barStyles": {
    "fill": "#2196f3",
    "stroke": "none"
  },
  "tooltipStyles": {
    "position": "absolute",
    "padding": "10px",
    "backgroundColor": "rgba(0, 0, 0, 0.8)",
    "color": "#fff",
    "borderRadius": "4px",
    "pointerEvents": "none",
    "fontSize": "12px",
    "zIndex": 1000
  },
  "events": {
    "onBarClick": {
      "description": "Triggered when a bar is clicked",
      "params": {
        "data": "object",
        "index": "number"
      }
    },
    "onMouseOver": {
      "description": "Triggered when mouse hovers over a bar",
      "params": {
        "data": "object",
        "index": "number"
      }
    },
    "onMouseOut": {
      "description": "Triggered when mouse leaves a bar",
      "params": {
        "data": "object",
        "index": "number"
      }
    }
  },
  "implementation": {
    "react": "function BarChart(props) {\n  const {\n    data = [],\n    xKey,\n    yKey,\n    width = 600,\n    height = 400,\n    margin = { top: 20, right: 30, bottom: 50, left: 60 },\n    barColor = '#2196f3',\n    hoverColor = '#1565c0',\n    title,\n    xAxisLabel,\n    yAxisLabel,\n    showGrid = true,\n    showTooltip = true,\n    horizontal = false,\n    stacked = false,\n    animate = true,\n    onBarClick,\n    onMouseOver,\n    onMouseOut,\n    ...rest\n  } = props;\n\n  const [hoveredBar, setHoveredBar] = React.useState(null);\n  const [tooltipPos, setTooltipPos] = React.useState({ x: 0, y: 0 });\n  const [tooltipContent, setTooltipContent] = React.useState('');\n  const svgRef = React.useRef(null);\n\n  React.useEffect(() => {\n    if (!data || data.length === 0 || !xKey || !yKey) return;\n    renderChart();\n  }, [data, xKey, yKey, width, height, horizontal, stacked]);\n\n  const renderChart = () => {\n    // This is a simplified implementation\n    // In a real-world scenario, you would use D3.js or another charting library\n    // to create a fully featured interactive chart\n    \n    // Clear previous chart\n    const svg = svgRef.current;\n    while (svg.firstChild) {\n      svg.removeChild(svg.firstChild);\n    }\n    \n    // Calculate dimensions\n    const chartWidth = width - margin.left - margin.right;\n    const chartHeight = height - margin.top - margin.bottom;\n    \n    // Create chart group\n    const g = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n    g.setAttribute('transform', `translate(${margin.left},${margin.top})`);\n    svg.appendChild(g);\n    \n    // Add title if provided\n    if (title) {\n      const titleElement = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      titleElement.setAttribute('x', chartWidth / 2);\n      titleElement.setAttribute('y', -margin.top / 2);\n      titleElement.setAttribute('text-anchor', 'middle');\n      titleElement.setAttribute('font-size', titleStyles.fontSize);\n      titleElement.setAttribute('font-weight', titleStyles.fontWeight);\n      titleElement.textContent = title;\n      g.appendChild(titleElement);\n    }\n    \n    // Find max value for scaling\n    const maxValue = Math.max(...data.map(d => parseFloat(d[yKey])));\n    \n    // Create scales\n    const xScale = (index) => (chartWidth / data.length) * index;\n    const yScale = (value) => chartHeight - (chartHeight * (value / maxValue));\n    \n    // Draw axes\n    // X axis\n    const xAxis = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n    xAxis.setAttribute('x1', 0);\n    xAxis.setAttribute('y1', chartHeight);\n    xAxis.setAttribute('x2', chartWidth);\n    xAxis.setAttribute('y2', chartHeight);\n    xAxis.setAttribute('stroke', axisStyles.stroke);\n    xAxis.setAttribute('stroke-width', axisStyles.strokeWidth);\n    g.appendChild(xAxis);\n    \n    // Y axis\n    const yAxis = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n    yAxis.setAttribute('x1', 0);\n    yAxis.setAttribute('y1', 0);\n    yAxis.setAttribute('x2', 0);\n    yAxis.setAttribute('y2', chartHeight);\n    yAxis.setAttribute('stroke', axisStyles.stroke);\n    yAxis.setAttribute('stroke-width', axisStyles.strokeWidth);\n    g.appendChild(yAxis);\n    \n    // X axis label\n    if (xAxisLabel) {\n      const xLabel = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      xLabel.setAttribute('x', chartWidth / 2);\n      xLabel.setAttribute('y', chartHeight + margin.bottom - 10);\n      xLabel.setAttribute('text-anchor', 'middle');\n      xLabel.textContent = xAxisLabel;\n      g.appendChild(xLabel);\n    }\n    \n    // Y axis label\n    if (yAxisLabel) {\n      const yLabel = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      yLabel.setAttribute('transform', `translate(${-margin.left + 15},${chartHeight/2}) rotate(-90)`);\n      yLabel.setAttribute('text-anchor', 'middle');\n      yLabel.textContent = yAxisLabel;\n      g.appendChild(yLabel);\n    }\n    \n    // Draw bars\n    const barWidth = (chartWidth / data.length) * 0.8;\n    data.forEach((d, i) => {\n      const value = parseFloat(d[yKey]);\n      const height = chartHeight - yScale(value);\n      const x = xScale(i) + (chartWidth / data.length) * 0.1;\n      const y = yScale(value);\n      \n      const bar = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n      bar.setAttribute('x', x);\n      bar.setAttribute('y', y);\n      bar.setAttribute('width', barWidth);\n      bar.setAttribute('height', height);\n      bar.setAttribute('fill', hoveredBar === i ? hoverColor : barColor);\n      \n      // Add data attributes for event handling\n      bar.dataset.index = i;\n      bar.dataset.value = d[yKey];\n      bar.dataset.label = d[xKey];\n      \n      // Event listeners\n      bar.addEventListener('click', () => {\n        if (onBarClick) onBarClick(d, i);\n      });\n      \n      bar.addEventListener('mouseover', (event) => {\n        setHoveredBar(i);\n        bar.setAttribute('fill', hoverColor);\n        \n        if (showTooltip) {\n          setTooltipContent(`${d[xKey]}: ${d[yKey]}`);\n          setTooltipPos({ \n            x: event.clientX, \n            y: event.clientY \n          });\n        }\n        \n        if (onMouseOver) onMouseOver(d, i);\n      });\n      \n      bar.addEventListener('mouseout', () => {\n        setHoveredBar(null);\n        bar.setAttribute('fill', barColor);\n        \n        if (onMouseOut) onMouseOut(d, i);\n      });\n      \n      // Add animation if enabled\n      if (animate) {\n        // Simple CSS transition\n        bar.style.transition = 'height 0.5s ease-in-out, y 0.5s ease-in-out';\n      }\n      \n      g.appendChild(bar);\n      \n      // Add x-axis labels\n      const label = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      label.setAttribute('x', x + barWidth / 2);\n      label.setAttribute('y', chartHeight + 16);\n      label.setAttribute('text-anchor', 'middle');\n      label.setAttribute('font-size', '12px');\n      label.textContent = d[xKey];\n      g.appendChild(label);\n    });\n    \n    // Add grid lines if enabled\n    if (showGrid) {\n      // Create 5 horizontal grid lines\n      for (let i = 0; i < 5; i++) {\n        const y = chartHeight / 5 * i;\n        const gridLine = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n        gridLine.setAttribute('x1', 0);\n        gridLine.setAttribute('y1', y);\n        gridLine.setAttribute('x2', chartWidth);\n        gridLine.setAttribute('y2', y);\n        gridLine.setAttribute('stroke', gridStyles.stroke);\n        gridLine.setAttribute('stroke-dasharray', gridStyles.strokeDasharray);\n        g.appendChild(gridLine);\n        \n        // Add y-axis tick labels\n        const value = maxValue - (maxValue / 5 * i);\n        const tickLabel = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n        tickLabel.setAttribute('x', -5);\n        tickLabel.setAttribute('y', y);\n        tickLabel.setAttribute('text-anchor', 'end');\n        tickLabel.setAttribute('dominant-baseline', 'middle');\n        tickLabel.setAttribute('font-size', '12px');\n        tickLabel.textContent = value.toFixed(1);\n        g.appendChild(tickLabel);\n      }\n    }\n  };\n\n  return (\n    <div style={{ position: 'relative' }} {...rest}>\n      <svg\n        ref={svgRef}\n        width={width}\n        height={height}\n        style={{ overflow: 'visible' }}\n      />\n      {showTooltip && hoveredBar !== null && (\n        <div\n          style={{\n            ...tooltipStyles,\n            left: `${tooltipPos.x + 10}px`,\n            top: `${tooltipPos.y - 10}px`,\n          }}\n        >\n          {tooltipContent}\n        </div>\n      )}\n    </div>\n  );\n}"
  }
} 