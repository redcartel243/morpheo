const [newWorkout, setNewWorkout] = useState({
  name: '',
  sets: '',
  reps: '',
  weight: '',
});
const handleInputChange = (e) => {
  const { name, value } = e.target;
  setNewWorkout(prevState => ({
    ...prevState,
    [name]: value,
  }));
};

const handleAddWorkout = () => {
  if (newWorkout.name && newWorkout.sets && newWorkout.reps && newWorkout.weight) {
    onAddWorkout(newWorkout); // Call the function passed via props
    setNewWorkout({ name: '', sets: '', reps: '', weight: '' }); // Reset the form
  }
};

const handleDeleteWorkout = (index) => {
  onDeleteWorkout(index); // Call the function passed via props
};

return (
  <VStack spacing={4} align="stretch" p={5} borderWidth={1} borderRadius="md" boxShadow="md" bg="bg.surface">
    <Heading size="lg" textAlign="center">Workout Tracker</Heading>

    {/* Input Form */}
    <VStack spacing={2} align="stretch">
      <Field Field.Label="Workout Name">
        <Input
          type="text"
          name="name"
          value={newWorkout.name}
          onChange={handleInputChange}
          placeholder="e.g., Bench Press"
        />
      </Field>
      <Field Field.Label="Sets">
        <Input
          type="number"
          name="sets"
          value={newWorkout.sets}
          onChange={handleInputChange}
          placeholder="e.g., 3"
        />
      </Field>
      <Field Field.Label="Reps">
        <Input
          type="number"
          name="reps"
          value={newWorkout.reps}
          onChange={handleInputChange}
          placeholder="e.g., 10"
        />
      </Field>
      <Field Field.Label="Weight (lbs)">
        <Input
          type="number"
          name="weight"
          value={newWorkout.weight}
          onChange={handleInputChange}
          placeholder="e.g., 135"
        />
      </Field>
      <Button colorPalette="blue" onClick={handleAddWorkout}>Add Workout</Button>
    </VStack>

    <Separator />

    {/* Workout List */}
    <VStack spacing={3} align="stretch">
      {workoutData && workoutData.map((workout, index) => (
        <HStack key={index} justify="space-between" p={3} borderWidth={1} borderRadius="md">
          <VStack align="start">
            <Text fontWeight="bold">{workout.name}</Text>
            <Text fontSize="sm">Sets: {workout.sets}, Reps: {workout.reps}, Weight: {workout.weight} lbs</Text>
          </VStack>
          <Button size="sm" colorPalette="red" onClick={() => handleDeleteWorkout(index)}>Delete</Button>
        </HStack>
      ))}
      {workoutData.length === 0 && (
        <Text textAlign="center" color="gray.500">No workouts added yet.</Text>
      )}
    </VStack>
  </VStack>
);